import path from 'node:path';

import { parse } from '@fluent/syntax';
import fs from 'fs-extra';

import { relativeToRoot, srcDir } from './paths';

const localeDir = path.join(srcDir, 'locale');
const ftlFile = path.join(localeDir, 'en-US/notero.ftl');
const tsFile = path.join(localeDir, 'fluent-types.ts');

console.log(`Generating TypeScript types from ${relativeToRoot(ftlFile)}`);

// Read Fluent file and parse it
const resource = parse(fs.readFileSync(ftlFile, 'utf8'), {});

// Extract message IDs
const messageIds = resource.body
  .filter((entry) => entry.type === 'Message')
  .map((message) => message.id.name);

// Generate TypeScript types
const tsContent = `// This file is generated by ${relativeToRoot(__filename)}

export type FluentMessageId =
${messageIds.map((id) => `  | '${id}'`).join('\n')};
`;

// Write TypeScript file
fs.writeFileSync(tsFile, tsContent);
